const axios = require('axios');

async function testYourSpecificData() {
  const baseURL = 'http://localhost:3000';
  
  console.log('üîß TEST CON TUS DATOS ESPEC√çFICOS');
  console.log('='.repeat(50));

  // REEMPLAZA ESTOS DATOS CON LOS QUE EST√ÅS ENVIANDO CUANDO OBTIENES EL ERROR
  const yourPostData = {
    title: 'Gu√≠a Completa de Gesti√≥n Empresarial con GoGestia', // Tu t√≠tulo exacto
    content: `
      <h2>Introducci√≥n</h2>
      <p>La gesti√≥n empresarial eficiente es fundamental para el √©xito de cualquier organizaci√≥n en el mundo actual.</p>
      
      <h3>Beneficios de una buena gesti√≥n</h3>
      <ul>
        <li>Mejora de la productividad</li>
        <li>Optimizaci√≥n de recursos</li>
        <li>Reducci√≥n de costos</li>
        <li>Mayor satisfacci√≥n del cliente</li>
      </ul>
      
      <h3>Herramientas tecnol√≥gicas</h3>
      <p>Las herramientas digitales como GoGestia permiten automatizar procesos y mejorar la eficiencia operativa.</p>
      
      <h2>Conclusi√≥n</h2>
      <p>Implementar un sistema de gesti√≥n adecuado es clave para el crecimiento sostenible de tu empresa.</p>
    `,
    excerpt: 'Descubre c√≥mo optimizar la gesti√≥n de tu empresa con herramientas modernas y estrategias efectivas.',
    author: 'Equipo GoGestia',
    category: 'Gesti√≥n Empresarial',
    tags: ['gesti√≥n', 'empresas', 'productividad', 'tecnolog√≠a'],
    published: true,
    featured: true,
    featuredImage: 'https://example.com/imagen-gestion.jpg',
    metaTitle: 'Gu√≠a Completa de Gesti√≥n Empresarial - GoGestia',
    metaDescription: 'Aprende las mejores pr√°cticas de gesti√≥n empresarial con nuestra gu√≠a completa.',
    slug: 'guia-completa-gestion-empresarial-gogestia'
  };

  console.log('\nüìã Datos que se van a enviar:');
  console.log(JSON.stringify(yourPostData, null, 2));

  try {
    console.log('\nüöÄ Enviando petici√≥n...');
    const response = await axios.post(`${baseURL}/api/blog/posts`, yourPostData, {
      headers: { 'Content-Type': 'application/json' }
    });

    console.log('\n‚úÖ POST CREADO EXITOSAMENTE');
    console.log(`   ID: ${response.data.data.id}`);
    console.log(`   Slug: ${response.data.data.slug}`);
    console.log(`   Status: ${response.status}`);
    
  } catch (error) {
    console.log('\n‚ùå ERROR CAPTURADO:');
    
    if (error.response) {
      console.log(`   Status HTTP: ${error.response.status}`);
      console.log(`   Error Code: ${error.response.data.code || 'N/A'}`);
      console.log(`   Error Type: ${error.response.data.error || 'N/A'}`);
      console.log(`   Message: ${error.response.data.message || 'N/A'}`);
      
      if (error.response.data.details) {
        console.log(`   Validation Details:`);
        error.response.data.details.forEach((detail, index) => {
          console.log(`     ${index + 1}. Campo: ${detail.path}`);
          console.log(`        Valor: ${detail.value || 'undefined'}`);
          console.log(`        Error: ${detail.msg}`);
        });
      }
      
      console.log('\nüìä Respuesta completa del servidor:');
      console.log(JSON.stringify(error.response.data, null, 2));
      
    } else {
      console.log(`   Error de conexi√≥n: ${error.message}`);
    }
  }
}

// INSTRUCCIONES:
// 1. Reemplaza 'yourPostData' con los datos exactos que est√°s enviando
// 2. Ejecuta: node test-your-data.js
// 3. Revisa los logs detallados

testYourSpecificData().catch(error => {
  console.error('\nüí• ERROR CR√çTICO:', error.message);
});
