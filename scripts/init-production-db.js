/**
 * Script de inicializaci√≥n de base de datos para producci√≥n con SQLite + Persistent Disk
 * Este script se ejecuta durante el build en Render
 */

const fs = require('fs');
const path = require('path');
const { sequelize, testConnection, syncDatabase } = require('../src/config/database');

// Verificar si existe el directorio del disco persistente
function ensurePersistentDiskDirectory() {
  const persistentDiskPath = process.env.PERSISTENT_DISK_PATH || '/opt/render/project/data';
  
  console.log(`üîç Verificando directorio del disco persistente: ${persistentDiskPath}`);
  console.log(`üåç NODE_ENV: ${process.env.NODE_ENV}`);
  console.log(`üìÇ Current working directory: ${process.cwd()}`);
  
  // En desarrollo, usar directorio local
  if (process.env.NODE_ENV !== 'production') {
    console.log(`‚ÑπÔ∏è Modo desarrollo - usando SQLite local`);
    return;
  }
  
  try {
    // Verificar si el directorio padre existe
    const parentDir = path.dirname(persistentDiskPath);
    console.log(`üîç Verificando directorio padre: ${parentDir}`);
    
    if (!fs.existsSync(parentDir)) {
      console.log(`‚ùå El directorio padre no existe: ${parentDir}`);
      console.log(`üí° Esto puede indicar que el disco persistente no est√° montado`);
      
      // Intentar crear en un directorio alternativo
      const alternativePath = path.join(process.cwd(), 'data');
      console.log(`üîÑ Intentando usar directorio alternativo: ${alternativePath}`);
      
      if (!fs.existsSync(alternativePath)) {
        fs.mkdirSync(alternativePath, { recursive: true });
      }
      
      // Actualizar variable de entorno temporalmente
      process.env.PERSISTENT_DISK_PATH = alternativePath;
      console.log(`‚ö†Ô∏è Usando directorio alternativo: ${alternativePath}`);
      return;
    }
    
    // Crear el directorio del disco persistente si no existe
    if (!fs.existsSync(persistentDiskPath)) {
      console.log(`üìÅ Creando directorio del disco persistente...`);
      fs.mkdirSync(persistentDiskPath, { recursive: true, mode: 0o755 });
      console.log(`‚úÖ Directorio creado: ${persistentDiskPath}`);
    } else {
      console.log(`‚úÖ Directorio del disco persistente existe: ${persistentDiskPath}`);
    }
    
    // Verificar permisos de escritura
    const testFile = path.join(persistentDiskPath, 'write-test.tmp');
    fs.writeFileSync(testFile, 'test-write-permissions');
    const readBack = fs.readFileSync(testFile, 'utf8');
    fs.unlinkSync(testFile);
    
    if (readBack === 'test-write-permissions') {
      console.log(`‚úÖ Permisos de escritura verificados en: ${persistentDiskPath}`);
    } else {
      throw new Error('No se pudo verificar la escritura');
    }
    
    // Mostrar informaci√≥n del directorio
    const stats = fs.statSync(persistentDiskPath);
    console.log(`üìä Informaci√≥n del directorio:`);
    console.log(`   - Permisos: ${stats.mode.toString(8)}`);
    console.log(`   - Propietario: UID ${stats.uid}, GID ${stats.gid}`);
    console.log(`   - Tama√±o: ${stats.size} bytes`);
    
  } catch (error) {
    console.error(`‚ùå Error con disco persistente:`, error.message);
    
    // Fallback: usar directorio local en el proyecto
    const fallbackPath = path.join(process.cwd(), 'data');
    console.log(`üîÑ Fallback: usando directorio local ${fallbackPath}`);
    
    try {
      if (!fs.existsSync(fallbackPath)) {
        fs.mkdirSync(fallbackPath, { recursive: true });
      }
      
      // Probar escritura en fallback
      const testFile = path.join(fallbackPath, 'write-test.tmp');
      fs.writeFileSync(testFile, 'test');
      fs.unlinkSync(testFile);
      
      // Actualizar variable de entorno
      process.env.PERSISTENT_DISK_PATH = fallbackPath;
      console.log(`‚úÖ Usando directorio fallback: ${fallbackPath}`);
      
    } catch (fallbackError) {
      console.error(`‚ùå Error tambi√©n en directorio fallback:`, fallbackError.message);
      throw new Error(`No se puede crear directorio para SQLite: ${error.message}`);
    }
  }
}

// Inicializar datos b√°sicos si es necesario
async function seedDefaultData() {
  try {
    // Importar modelos
    const models = require('../src/models');
    
    console.log('üå± Verificando datos por defecto...');
    
    // Verificar si hay categor√≠as
    const categoryCount = await models.Category.count();
    if (categoryCount === 0) {
      console.log('üìù Creando categor√≠as por defecto...');
      
      const defaultCategories = [
        {
          name: 'Tecnolog√≠a',
          slug: 'tecnologia',
          description: 'Art√≠culos sobre tecnolog√≠a y programaci√≥n'
        },
        {
          name: 'Noticias',
          slug: 'noticias', 
          description: '√öltimas noticias y actualizaciones'
        },
        {
          name: 'Tutoriales',
          slug: 'tutoriales',
          description: 'Gu√≠as paso a paso y tutoriales'
        }
      ];
      
      for (const categoryData of defaultCategories) {
        await models.Category.create(categoryData);
      }
      
      console.log(`‚úÖ ${defaultCategories.length} categor√≠as creadas`);
    } else {
      console.log(`‚ÑπÔ∏è Ya existen ${categoryCount} categor√≠as`);
    }
    
    // Verificar si hay autores
    const authorCount = await models.Author.count();
    if (authorCount === 0) {
      console.log('üìù Creando autor por defecto...');
      
      await models.Author.create({
        name: 'GoGestia',
        avatar: null
      });
      
      console.log('‚úÖ Autor por defecto creado');
    } else {
      console.log(`‚ÑπÔ∏è Ya existen ${authorCount} autores`);
    }
    
    // Verificar si hay tags
    const tagCount = await models.Tag.count();
    if (tagCount === 0) {
      console.log('üìù Creando tags por defecto...');
      
      const defaultTags = [
        { name: 'javascript' },
        { name: 'nodejs' },
        { name: 'react' },
        { name: 'tutorial' },
        { name: 'api' }
      ];
      
      for (const tagData of defaultTags) {
        await models.Tag.create(tagData);
      }
      
      console.log(`‚úÖ ${defaultTags.length} tags creados`);
    } else {
      console.log(`‚ÑπÔ∏è Ya existen ${tagCount} tags`);
    }
    
  } catch (error) {
    console.error('‚ùå Error creando datos por defecto:', error);
    throw error;
  }
}

// Funci√≥n principal de inicializaci√≥n
async function initProductionDatabase() {
  console.log('üöÄ Iniciando configuraci√≥n de base de datos para producci√≥n...');
  console.log(`üåç NODE_ENV: ${process.env.NODE_ENV}`);
  console.log(`üìÅ PERSISTENT_DISK_PATH: ${process.env.PERSISTENT_DISK_PATH || 'No configurado'}`);
  
  try {
    // 1. Verificar/crear directorio del disco persistente
    if (process.env.NODE_ENV === 'production') {
      ensurePersistentDiskDirectory();
    }
    
    // 2. Probar conexi√≥n a la base de datos
    console.log('üîó Probando conexi√≥n a la base de datos...');
    await testConnection();
    
    // 3. Sincronizar modelos (usar alter en lugar de force para preservar datos)
    console.log('üîÑ Sincronizando modelos de base de datos...');
    await syncDatabase(false); // No usar force en producci√≥n
    
    // 4. Crear datos por defecto si no existen
    await seedDefaultData();
    
    console.log('üéâ Base de datos inicializada correctamente para producci√≥n');
    
    // 5. Mostrar informaci√≥n final
    const models = require('../src/models');
    const stats = {
      categories: await models.Category.count(),
      authors: await models.Author.count(),
      tags: await models.Tag.count(),
      posts: await models.Post.count()
    };
    
    console.log('üìä Estad√≠sticas de la base de datos:');
    console.log(`   - Categor√≠as: ${stats.categories}`);
    console.log(`   - Autores: ${stats.authors}`);
    console.log(`   - Tags: ${stats.tags}`);
    console.log(`   - Posts: ${stats.posts}`);
    
  } catch (error) {
    console.error('‚ùå Error inicializando base de datos:', error);
    process.exit(1);
  } finally {
    // Cerrar conexi√≥n
    await sequelize.close();
  }
}

// Solo ejecutar si es llamado directamente
if (require.main === module) {
  initProductionDatabase();
}

module.exports = {
  initProductionDatabase,
  ensurePersistentDiskDirectory,
  seedDefaultData
};
